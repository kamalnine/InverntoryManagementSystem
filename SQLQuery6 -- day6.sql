use lms_db;
select* from LMS_BOOK_DETAILS;
select * from LMS_SUPPLIERS_DETAILS;
select * from LMS_BOOK_ISSUE;
select * from LMS_FINE_DETAILS;
select * from LMS_MEMBERS;
select * from LMS_SUPPLIERS_DETAILS;
select * from LMS_BOOK_ISSUE;

select BOOK_TITLE,SUPPLIER_NAME,MEMBER_NAME FROM LMS_BOOK_DETAILS L1 JOIN LMS_SUPPLIERS_DETAILS L2 ON  L1.SUPPLIER_ID = L2.SUPPLIER_ID JOIN LMS_BOOK_ISSUE L3
ON L1.BOOK_CODE = L3.BOOK_CODE JOIN LMS_MEMBERS L4 ON L4.MEMBER_ID = L3.MEMBER_ID;

--STORED PROCEDURE
GO
CREATE PROCEDURE USP_FETCHBOOKDETAILS
AS 
BEGIN
select BOOK_TITLE,SUPPLIER_NAME,MEMBER_NAME FROM LMS_BOOK_DETAILS L1 JOIN LMS_SUPPLIERS_DETAILS L2 ON  L1.SUPPLIER_ID = L2.SUPPLIER_ID JOIN LMS_BOOK_ISSUE L3
ON L1.BOOK_CODE = L3.BOOK_CODE JOIN LMS_MEMBERS L4 ON L4.MEMBER_ID = L3.MEMBER_ID;
END
GO
USP_FETCHBOOKDETAILS;
GO
CREATE PROC USP_INSERTFINEDETAILS
(@FINE_RANGE CHAR(5),@FINE_AMOUNT MONEY)
AS
BEGIN
INSERT INTO LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT)VALUES(@FINE_RANGE,@FINE_AMOUNT);
END

EXEC USP_INSERTFINEDETAILS 'R9', 275;
EXEC USP_INSERTFINEDETAILS 'R10',300;

--VIEWS VIRTUAL TABLE
go
Create View vw_Book_details
AS

Select   l1.BOOK_TITLE,l2.SUPPLIER_NAME,l4.MEMBER_NAME  
from LMS_BOOK_DETAILS as l1 join LMS_SUPPLIERS_DETAILS as l2 
on l1.SUPPLIER_ID=l2.SUPPLIER_ID
join LMS_BOOK_ISSUE as l3 on l3.BOOK_CODE=l1.BOOK_CODE join 
LMS_MEMBERS as l4 on l4.MEMBER_ID=l3.MEMBER_ID;

Select * from vw_Book_details where supplier_name like 'k%';



--triggers
--INSERTING
GO
create trigger trg_tigg
on LMS_FINE_DETAILS
FOR 
INSERT AS
BEGIN
PRINT 'A NEW ROW ADDED '
END
--UPDATING
GO
create trigger trg_upd
on LMS_FINE_DETAILS
FOR
UPDATE
AS BEGIN
PRINT ' UPDATED SUCESSFULLY'
END

UPDATE LMS_FINE_DETAILS SET FINE_AMOUNT = 0 WHERE FINE_RANGE = 'R0';


--PREVENT FROM DELETION 
GO
CREATE TRIGGER TRG_PDEL
ON LMS_FINE_DETAILS
FOR DELETE 
AS BEGIN
ROLLBACK
PRINT 'NOT ALLOWED TO DELETE'
END

DELETE FROM LMS_FINE_DETAILS WHERE FINE_RANGE = 'R12';

--transaction control language
--commit :- commit command is used to permanently save any transactions in the database
--Rollback :- This command restores the database to last commited state. it is also used with savepoint command to jump to the savepoint in a transaction
--savepoint :- savepoint command is used to temporarily save the transaction so that you can rollback to the point when necessery.


BEGIN TRAN
insert into LMS_FINE_DETAILS VALUES('R12',325);

COMMIT;

BEGIN TRAN
ROLLBACK;